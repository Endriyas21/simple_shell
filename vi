#include "shell.h"

/**
 * runShell - Main shell execution loop.
 * @info: Pointer to the parameter and return info structure.
 * @av: Argument vector from main.
 *
 * Return: 0 on success, 1 on error, or error code.
 */
int runShell(info_t *info, char **av)
{
	ssize_t bytesRead = 0;
	int builtinResult = 0;

	while (bytesRead != -1 && builtinResult != -2)
	{
		resetInfo(info);
		if (isInteractiveShell(info))
			_puts("$ ");
		_flushErrorBuffer(BUFFER_FLUSH);
		bytesRead = readInput(info);
		if (bytesRead != -1)
		{
			initializeInfo(info, av);
			builtinResult = findAndExecuteBuiltin(info);
			if (builtinResult == -1)
				findAndExecuteCommand(info);
		}
		else if (isInteractiveShell(info))
			_putchar('\n');
		clearInfoMemory(info, 0);
	}
	writeHistoryToFile(info);
	clearInfoMemory(info, 1);
	if (!isInteractiveShell(info) && info->status)
		exit(info->status);
	if (builtinResult == -2)
	{
		if (info->errorNum == -1)
			exit(info->status);
		exit(info->errorNum);
	}
	return (builtinResult);
}

/**
 * findAndExecuteBuiltin - Searches for and executes a builtin command.
 * @info: Pointer to the parameter and return info structure.
 *
 * Return: -1 if builtin not found,
 *         0 if builtin executed successfully,
 *         1 if builtin found but not successful,
 *         2 if builtin signals exit()
 */
int findAndExecuteBuiltin(info_t *info)
{
	int i, builtinResult = -1;
	builtin_table builtinTable[] = {
		{"exit", executeExit},
		{"env", executeEnv},
		{"help", executeHelp},
		{"history", executeHistory},
		{"setenv", executeSetenv},
		{"unsetenv", executeUnsetenv},
		{"cd", executeCd},
		{"alias", executeAlias},
		{NULL, NULL}
	};

	for (i = 0; builtinTable[i].type; i++)
		if (_strcmp(info->argv[0], builtinTable[i].type) == 0)
		{
			info->lineCounter++;
			builtinResult = builtinTable[i].func(info);
			break;
		}
	return (builtinResult);
}

/**
 * findAndExecuteCommand - Searches for and executes a command in PATH.
 * @info: Pointer to the parameter and return info structure.
 *
 * Return: void
 */
void findAndExecuteCommand(info_t *info)
{
	char *path = NULL;
	int i, numArguments;

	info->pathToCommand = info->argv[0];
	if (info->lineCounterFlag == 1)
	{
		info->lineCounter++;
		info->lineCounterFlag = 0;
	}
	for (i = 0, numArguments = 0; info->arg[i]; i++)
		if (!isDelimiter(info->arg[i], " \t\n"))
			numArguments++;
	if (!numArguments)
		return;

	path = findPathToCommand(info, _getenv(info, "PATH="), info->argv[0]);
	if (path)
	{
		info->pathToCommand = path;
		forkAndExecuteCommand(info);
	}
	else
	{
		if ((isInteractiveShell(info) || _getenv(info, "PATH=")
				|| info->argv[0][0] == '/') && isCommand(info, info->argv[0]))
			forkAndExecuteCommand(info);
		else if (*(info->arg) != '\n')
		{
			info->status = 127;
			printErrorMessage(info, "not found\n");
		}
	}
}

/**
 * forkAndExecuteCommand - Forks an exec thread to run a command.
 * @info: Pointer to the parameter and return info structure.
 *
 * Return: void
 */
void forkAndExecuteCommand(info_t *info)
{
	pid_t childProcessId;

	childProcessId = fork();
	if (childProcessId == -1)
	{
		perror("Error:");
		return;
	}
	if (childProcessId == 0)
	{
		if (executeCommand(info) == -1)
		{
			clearInfoMemory(info, 1);
			if (errno == EACCES)
				exit(126);
			exit(1);
		}
	}
	else
	{
		wait(&(info->status));
		if (WIFEXITED(info->status))
		{
			info->status = WEXITSTATUS(info->status);
			if (info->status == 126)
				printErrorMessage(info, "Permission denied\n");
		}
	}
}

